#+
# Copyright (c) 2010-2015 iXsystems, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL iXsystems, Inc. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

include("repos.pyd")
include("ports.pyd")
include("packages.pyd")

profile = {
    "name": "truenas12",
    "description": "TrueNAS 12",
    "owner": "dev@ixsystems.com",
    "status": "active"
}

kernel_config = "${PROFILE_ROOT}/kernel/TRUENAS.amd64"

kernel_modules = [
    "autofs",
    "bnxt",
    "cc",
    "dtrace",
    "efirt",
    "ext2fs",
    "firewire",
    "geom",
    "i2c",
    "ipmi",
    "ipsec",
    "khelp/h_ertt",
    "libiconv",
    "libmchain",
    "linprocfs",
    "linsysfs",
    "linux",
    "linux64",
    "linux_common",
    "mac_ntpd",
    "msdosfs_iconv",
    "ispfw/ispfw",
    "opensolaris",
    "pf",
    "pflog",
    "smbfs",
    "udf",
    "usb",
    "fusefs",
    "vmm",
    "netmap",
    "nmdm",
    "ntb",
    "nvdimm",
    "ioat",
    "toecore",
    "cxgb",
    "cxgbe",
    "dummynet",
    "hwpmc",
    "ipoib",
    "mlx4ib",
    "mlx5ib",
    "mthca",
    "ocs_fc",
    "qlxgbe",
    "smartpqi",
]

# World/kernel build configuration
make_conf_build = {
    "WITHOUT_ATM":                  "yes",
    "WITHOUT_BLUETOOTH":            "yes",
    "WITHOUT_BSDINSTALL":           "yes",
    "WITHOUT_BSNMP":                "yes",
    "WITHOUT_CALENDAR":             "yes",
    "WITHOUT_CTM":                  "yes",
    "WITHOUT_CUSE":                 "yes",
    "WITHOUT_DICT":                 "yes",
    "WITHOUT_FORTRAN":              "yes",
    "WITHOUT_FREEBSD_UPDATE":       "yes",
    "WITHOUT_GAMES":                "yes",
    "WITHOUT_GCOV":                 "yes",
    "WITHOUT_GPIB":                 "yes",
    "WITHOUT_HTML":                 "yes",
    "WITHOUT_IPFILTER":             "yes",
    "WITHOUT_IPX":                  "yes",
    "WITHOUT_LIB32":                "yes",
    "WITHOUT_LIBKSE":               "yes",
    "WITHOUT_LPR":                  "yes",
    "WITHOUT_NDIS":                 "yes",
    "WITHOUT_NLS":                  "yes",
    "WITHOUT_OBJC":                 "yes",
    "WITH_OPENSSH_NONE_CIPHER":     "yes",
    "WITHOUT_PC_SYSINSTALL":        "yes",
    "WITHOUT_PPP":                  "yes",
    "WITHOUT_RCMDS":                "yes",
    "WITHOUT_SENDMAIL":             "yes",
    "WITHOUT_SVNLITE":              "yes",
    "WITHOUT_SYSCONS":              "yes",
    "WITHOUT_SYSINSTALL":           "yes",
    "WITHOUT_WIRELESS":             "yes",
    "WITHOUT_WPA_SUPPLICANT_EAPOL": "yes",
    "WITHOUT_ZFS":                  "yes",
    "LOCAL_DIRS":                   "share/examples/ses tools/tools/cxgbtool tools/tools/cxgbetool"
}

# Packages build jail configuration
make_conf_jail = {
    "WITHOUT_DEBUG_FILES":          "yes",
}

# Packages configuration
make_conf_pkg = {
    "DEFAULT_VERSIONS":             "python=3.7 python3=3.7 ssl=base",
    "WITH_SAMBA4_PYTHON3":          "python3.7",
    "OPTIONS_UNSET":                "DOCS X11 JAVA",
    "WANT_OPENLDAP_SASL":           "yes",
    "USE_PACKAGE_DEPENDS":          "yes",
    "BATCH":                        "yes",
    "WRKDIRPREFIX":                 "/wrkdirs",
    "DISABLE_LICENSES":             "yes",
    "DEBUG_FLAGS":                  "-g",
    "CFLAGS":                       "+= -g",
    "STRIP":                        "",
    "MAKE_ENV":                     "+= DONTSTRIP=yes",
    "STRIP_CMD":                    "true"
}

# Configuration for installed NAS
make_conf_run = {
    "WITHOUT_RCS":                  "yes",
}

# Configuration for installer
make_conf_boot = {
    "WITHOUT_BHYVE":                "yes",
    "WITHOUT_CALENDAR":             "yes",
    "WITHOUT_DEBUG_FILES":          "yes",
    "WITHOUT_DICT":                 "yes",
    "WITHOUT_EXAMPLES":             "yes",
    "WITHOUT_GROFF":                "yes",
    "WITHOUT_ICONV":                "yes",
    "WITHOUT_INETD":                "yes",
    "WITHOUT_JAIL":                 "yes",
    "WITHOUT_KDUMP":                "yes",
    "WITHOUT_KERNEL_SYMBOLS":       "yes",
    "WITHOUT_LOCALES":              "yes",
    "WITHOUT_LPR":                  "yes",
    "WITHOUT_MAIL":                 "yes",
    "WITHOUT_NIS":                  "yes",
    "WITHOUT_NLS":                  "yes",
    "WITHOUT_PMC":                  "yes",
    "WITHOUT_VT":                   "yes",
    "WITHOUT_ZFS":                  "yes",
}

early_customize_tasks = [
    "write-version"
]

# If not doing a SDK build
if SDK == "no":
    temp_dict = {
        "WITHOUT_CLANG_FULL":           "yes",
        "WITHOUT_PROFILE":              "yes",
        "WITHOUT_TESTS":                "yes",
    }
    make_conf_build.update(temp_dict)
    temp_dict = {
        "WITHOUT_TOOLCHAIN":            "yes",
        "WITHOUT_INSTALLLIB":           "yes",
    }
    make_conf_run.update(temp_dict)
    temp_dict = {
         "WITHOUT_MAKE":                 "yes",
         "WITHOUT_MAN":                  "yes",
         "WITHOUT_PROFILE":              "yes",
    }
    make_conf_boot.update(temp_dict)
    customize_tasks = [
         "remove-bits",
         "remove-var-cache-pkg",
         "remove-non-amd64",
         "conf-base",
         "link-bash",
         "login-conf",
         "install-avatar-conf"
    ]
else:
    customize_tasks = [
         "remove-var-cache-pkg",
         "conf-base",
         "link-bash",
         "login-conf",
         "install-avatar-conf"
    ]
